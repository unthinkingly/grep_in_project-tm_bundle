<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
	&lt;key&gt;beforeRunningCommand&lt;/key&gt;
	&lt;string&gt;nop&lt;/string&gt;
	&lt;key&gt;command&lt;/key&gt;
	&lt;string&gt;#!/usr/bin/env ruby -rcgi

# By Henrik Nyh &amp;lt;http://henrik.nyh.se&amp;gt; 2007-06-26
# Free to modify and redistribute with credit.

#Changes by Ben
# ignore tmp/log directories
# easier install from github

%w{ui web_preview escape}.each { |lib| require "%s/lib/%s" % [ENV['TM_SUPPORT_PATH'], lib] }

NAME = "Grep in Project"
HEAD  = &amp;lt;&amp;lt;-HTML
  &amp;lt;style type="text/css"&amp;gt;
    table { font-size:0.9em; border-collapse:collapse; border-bottom:1px solid #555; }
    h2 { font-size:1.3em; }
    tr { background:#FFF; }
    tr.odd { background:#EEE; }
    td { vertical-align:top; white-space:nowrap; padding:0.4em 1em; color:#000 !important; }
    tr td:first-child { text-align:right; padding-right:1.5em; }
    td a { color:#00F !important; }
    tr.binary { background:#E8AFA8; }
    tr.binary.odd { background:#E0A7A2; }
    tr#empty { border-bottom:1px solid #FFF; }
    tr#empty td { text-align:center; }
    tr.newFile, tr.binary { border-top:1px solid #555; }
    .keyword { font-weight:bold; background:#F6D73A; margin:0 0.1em; }
    .ellipsis { color:#777; margin:0 0.5em; }
  &amp;lt;/style&amp;gt;
  &amp;lt;script type="text/javascript"&amp;gt;
    function reveal_file(path) {
      const quote = '"';
      const command = "osascript -e ' tell app "+quote+"Finder"+quote+"' " +
                        " -e 'reveal (POSIX file " +quote+path+quote + ")' " +
                        " -e 'activate' " + 
                      " -e 'end' ";
      TextMate.system(command, null);
    }

  function findPos(obj) {
    var curleft = curtop = 0;
    if (obj.offsetParent) {
      curleft = obj.offsetLeft
      curtop = obj.offsetTop
      while (obj = obj.offsetParent) {
        curleft += obj.offsetLeft
        curtop += obj.offsetTop
      }
    }
    return {left: curleft, top: curtop};
  }
  
  function resizeTableToFit() {
    var table = document.getElementsByTagName("table")[0];
    const minWidth = 450, minHeight = 250;

    var pos = findPos(table);
    var tableFitWidth = table.offsetWidth + pos.left * 2;
    var tableFitHeight = table.offsetHeight + pos.top + 50;
    var screenFitWidth = screen.width - 150;
    var screenFitHeight = screen.height - 150;

    var setWidth = tableFitWidth &amp;gt; screenFitWidth ? screenFitWidth : tableFitWidth;
    var setHeight = tableFitHeight &amp;gt; screenFitHeight ? screenFitHeight : tableFitHeight;  
    setWidth = setWidth &amp;lt; minWidth ? minWidth : setWidth;
    setHeight = setHeight &amp;lt; minHeight ? minHeight : setHeight;

    window.resizeTo(setWidth, setHeight);
  }
  
  &amp;lt;/script&amp;gt;
HTML

RESIZE_TABLE = &amp;lt;&amp;lt;-HTML
  &amp;lt;script type="text/javascript"&amp;gt;
    resizeTableToFit();
  &amp;lt;/script&amp;gt;
HTML

def ellipsize_path(path)
  path.sub(/^(.{30})(.{10,})(.{30})$/) { "#$1⋯#$3" }
end

def escape(string)
  CGI.escapeHTML(string)
end

def bail(message)
  puts &amp;lt;&amp;lt;-HTML
    &amp;lt;h2&amp;gt;#{ message }&amp;lt;/h2&amp;gt;
  HTML
  html_footer
  exit
end

directory = ENV['TM_PROJECT_DIRECTORY'] || 
            ( ENV['TM_FILEPATH'] &amp;amp;&amp;amp; File.dirname(ENV['TM_FILEPATH']) )

puts html_head(
  :window_title =&amp;gt; NAME,
  :page_title   =&amp;gt; NAME,
  :sub_title    =&amp;gt; directory || "Error",
  :html_head    =&amp;gt; HEAD
)

bail("Not in a saved file") unless directory

query = TextMate::UI.request_string(:title =&amp;gt; "Grep in Project", :prompt =&amp;gt; "Find this:", :default =&amp;gt; %x{pbpaste -pboard find})
bail("Search aborted") unless query
IO.popen('pbcopy -pboard find', 'w') { |copy| copy.print query }

puts &amp;lt;&amp;lt;-HTML
  &amp;lt;h2&amp;gt;Searching for “#{ escape(query) }”&amp;lt;/h2&amp;gt;
  &amp;lt;table&amp;gt;
HTML

# TODO: Respect ENV['TM_SELECTED_FILES']
command = %{cd "#{directory}"; find . \\( -path '*/.svn' -or -path '*/.git' -or -path '*/vendor/rails' -or -path '*/log' -or -path '*/tmp' \\) -prune -or -type f -print0 | xargs -0 grep -nr --ignore-case --fixed-strings --exclude='*.log' #{e_sh query}}

IO.popen(command) do |pipe|

  # Used to highlight matches
  query_re = Regexp.new( Regexp.escape(CGI.escapeHTML(query)), Regexp::IGNORECASE)
  
  last_path = path = i = nil
  pipe.each_with_index do |line, i|

    if line =~ /^(Binary file )(.*?) matches/
      prefix, file = $1, $2
      path = directory + file[1..-1]
      puts &amp;lt;&amp;lt;-HTML
        &amp;lt;tr class="binary #{ 'odd' unless i%2==0 }"&amp;gt;
          &amp;lt;td&amp;gt;
            #{ prefix }
            &amp;lt;a href="javascript:reveal_file('#{ escape(path) }')" title="#{ escape(path) }"&amp;gt;#{ ellipsize_path(file) }&amp;lt;/a&amp;gt;
          &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        #{ RESIZE_TABLE if i%100==0 }
      HTML
      next
    end

    line.gsub!(/^([^:]+):(\d+):(.*)$/) do

      relative_path, line_number, content = $1, $2, $3.strip
      path = directory + relative_path[1..-1]
      url = "txmt://open/?url=file://#{path}&amp;amp;line=#{line_number}"
      
      content = escape(content).
                  # Highlight keywords
                  gsub(query_re) { %{&amp;lt;strong class="keyword"&amp;gt;#$&amp;amp;&amp;lt;/strong&amp;gt;} }.
                  # Ellipsize before, between and after keywords
                  gsub(%r{(^[^&amp;lt;]{25}|&amp;lt;/strong&amp;gt;[^&amp;lt;]{15})([^&amp;lt;]{20,})([^&amp;lt;]{15}&amp;lt;strong|[^&amp;lt;]{25}$)}) do
                    %{#$1&amp;lt;span class="ellipsis" title="#{escape($2)}"&amp;gt;⋯&amp;lt;/span&amp;gt;#$3}
                  end
      &amp;lt;&amp;lt;-HTML

        &amp;lt;tr class="#{ 'odd' unless i%2==0 } #{ 'newFile' if (path != last_path) }"&amp;gt;
          &amp;lt;td&amp;gt;
            &amp;lt;a href="#{ url }" title="#{ "%s:%s" % [path, line_number] }"&amp;gt;
              #{ "%s:%s" % [ellipsize_path(relative_path), line_number] }
            &amp;lt;/a&amp;gt;
          &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;#{ content }&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;

      HTML
    end
    puts line
    last_path = path

  end

  if i
    # A paragraph inside the table ends up at the top even though it's output
    # at the end. Something of a hack :)
    i += 1
    puts &amp;lt;&amp;lt;-HTML
      &amp;lt;p&amp;gt;#{i} matching line#{i==1 ? '' : 's'}:&amp;lt;/p&amp;gt;
      #{RESIZE_TABLE}
    HTML
  else
    puts &amp;lt;&amp;lt;-HTML
      &amp;lt;tr id="empty"&amp;gt;&amp;lt;td colspan="2"&amp;gt;No results.&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    HTML
  end
    
end

puts &amp;lt;&amp;lt;-HTML
&amp;lt;/table&amp;gt;
HTML

html_footer
&lt;/string&gt;
	&lt;key&gt;input&lt;/key&gt;
	&lt;string&gt;none&lt;/string&gt;
	&lt;key&gt;keyEquivalent&lt;/key&gt;
	&lt;string&gt;@F&lt;/string&gt;
	&lt;key&gt;name&lt;/key&gt;
	&lt;string&gt;Grep in Project&lt;/string&gt;
	&lt;key&gt;output&lt;/key&gt;
	&lt;string&gt;showAsHTML&lt;/string&gt;
	&lt;key&gt;uuid&lt;/key&gt;
	&lt;string&gt;4B408A80-128A-4A15-9AF7-753981A61BC1&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>@F</string>
	<key>name</key>
	<string>Grep in Project</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>3384AEA1-1AAE-4E88-B6BC-6029E9A1762A</string>
</dict>
</plist>
